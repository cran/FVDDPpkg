// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// compute_new_weights_cpp
NumericVector compute_new_weights_cpp(NumericMatrix M, NumericMatrix LM, double t, NumericVector w, NumericVector lambda, NumericMatrix& C_matrix);
RcppExport SEXP _FVDDPpkg_compute_new_weights_cpp(SEXP MSEXP, SEXP LMSEXP, SEXP tSEXP, SEXP wSEXP, SEXP lambdaSEXP, SEXP C_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type LM(LMSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type C_matrix(C_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_new_weights_cpp(M, LM, t, w, lambda, C_matrix));
    return rcpp_result_gen;
END_RCPP
}
// compute_M_w_cpp
List compute_M_w_cpp(NumericMatrix M_past, NumericMatrix M_future, NumericVector n, double t_past, double t_future, NumericVector w_past, NumericVector w_future, bool atomic, NumericVector lambda, NumericMatrix& C_matrix_past, NumericMatrix& C_matrix_future, double theta, NumericVector theta_P0_ystar, NumericMatrix& nonatomic_w_matrix);
RcppExport SEXP _FVDDPpkg_compute_M_w_cpp(SEXP M_pastSEXP, SEXP M_futureSEXP, SEXP nSEXP, SEXP t_pastSEXP, SEXP t_futureSEXP, SEXP w_pastSEXP, SEXP w_futureSEXP, SEXP atomicSEXP, SEXP lambdaSEXP, SEXP C_matrix_pastSEXP, SEXP C_matrix_futureSEXP, SEXP thetaSEXP, SEXP theta_P0_ystarSEXP, SEXP nonatomic_w_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M_past(M_pastSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type M_future(M_futureSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type t_past(t_pastSEXP);
    Rcpp::traits::input_parameter< double >::type t_future(t_futureSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_past(w_pastSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_future(w_futureSEXP);
    Rcpp::traits::input_parameter< bool >::type atomic(atomicSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type C_matrix_past(C_matrix_pastSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type C_matrix_future(C_matrix_futureSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta_P0_ystar(theta_P0_ystarSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type nonatomic_w_matrix(nonatomic_w_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_M_w_cpp(M_past, M_future, n, t_past, t_future, w_past, w_future, atomic, lambda, C_matrix_past, C_matrix_future, theta, theta_P0_ystar, nonatomic_w_matrix));
    return rcpp_result_gen;
END_RCPP
}
// montecarlo_sample_prop_cpp
List montecarlo_sample_prop_cpp(NumericMatrix M, double t, int N, NumericVector w, NumericVector lambda);
RcppExport SEXP _FVDDPpkg_montecarlo_sample_prop_cpp(SEXP MSEXP, SEXP tSEXP, SEXP NSEXP, SEXP wSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w(wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(montecarlo_sample_prop_cpp(M, t, N, w, lambda));
    return rcpp_result_gen;
END_RCPP
}
// montecarlo_sample_smooth_cpp
List montecarlo_sample_smooth_cpp(NumericMatrix M_past, NumericMatrix M_future, NumericVector n, double t_past, double t_future, NumericVector w_past, NumericVector w_future, int N, bool atomic, NumericVector lambda, double theta, NumericVector theta_P0_ystar, NumericMatrix& nonatomic_w_matrix);
RcppExport SEXP _FVDDPpkg_montecarlo_sample_smooth_cpp(SEXP M_pastSEXP, SEXP M_futureSEXP, SEXP nSEXP, SEXP t_pastSEXP, SEXP t_futureSEXP, SEXP w_pastSEXP, SEXP w_futureSEXP, SEXP NSEXP, SEXP atomicSEXP, SEXP lambdaSEXP, SEXP thetaSEXP, SEXP theta_P0_ystarSEXP, SEXP nonatomic_w_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M_past(M_pastSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type M_future(M_futureSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type t_past(t_pastSEXP);
    Rcpp::traits::input_parameter< double >::type t_future(t_futureSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_past(w_pastSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_future(w_futureSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< bool >::type atomic(atomicSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta_P0_ystar(theta_P0_ystarSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type nonatomic_w_matrix(nonatomic_w_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(montecarlo_sample_smooth_cpp(M_past, M_future, n, t_past, t_future, w_past, w_future, N, atomic, lambda, theta, theta_P0_ystar, nonatomic_w_matrix));
    return rcpp_result_gen;
END_RCPP
}
// compute_errors_cpp
NumericVector compute_errors_cpp(NumericMatrix M_exact, NumericVector w_exact, NumericMatrix M_approx, NumericVector w_approx, bool rm_unmatched);
RcppExport SEXP _FVDDPpkg_compute_errors_cpp(SEXP M_exactSEXP, SEXP w_exactSEXP, SEXP M_approxSEXP, SEXP w_approxSEXP, SEXP rm_unmatchedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type M_exact(M_exactSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_exact(w_exactSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type M_approx(M_approxSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_approx(w_approxSEXP);
    Rcpp::traits::input_parameter< bool >::type rm_unmatched(rm_unmatchedSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_errors_cpp(M_exact, w_exact, M_approx, w_approx, rm_unmatched));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FVDDPpkg_compute_new_weights_cpp", (DL_FUNC) &_FVDDPpkg_compute_new_weights_cpp, 6},
    {"_FVDDPpkg_compute_M_w_cpp", (DL_FUNC) &_FVDDPpkg_compute_M_w_cpp, 14},
    {"_FVDDPpkg_montecarlo_sample_prop_cpp", (DL_FUNC) &_FVDDPpkg_montecarlo_sample_prop_cpp, 5},
    {"_FVDDPpkg_montecarlo_sample_smooth_cpp", (DL_FUNC) &_FVDDPpkg_montecarlo_sample_smooth_cpp, 13},
    {"_FVDDPpkg_compute_errors_cpp", (DL_FUNC) &_FVDDPpkg_compute_errors_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_FVDDPpkg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
